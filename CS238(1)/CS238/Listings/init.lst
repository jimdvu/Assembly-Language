


ARM Macro Assembler    Page 1 


    1 00000000         ; File: init.s
    2 00000000         ; Author: Rajiv Bagai
    3 00000000         
    4 00000000         ; This file needs to be in a Keil version 5 project, tog
                       ether with some file HAx-main.s,
    5 00000000         ; for any CS 238 programming Home Assignment HAx
    6 00000000         
    7 00000000         ; BTW, the HAx-main.s files, for assignments HA4 onwards
                       , will be developed by you :)
    8 00000000         
    9 00000000         ;-------------------------------------------------------
                       --
   10 00000000         
   11 00000000         ; Some commonly used ASCII codes
   12 00000000         
   13 00000000 0000000D 
                       CR      EQU              0x0D        ; Carriage Return (
                                                            to move cursor to b
                                                            eginning of current
                                                             line)
   14 00000000 0000000A 
                       LF      EQU              0x0A        ; Line Feed (to mov
                                                            e cursor to same co
                                                            lumn of next line)
   15 00000000         
   16 00000000         ;-------------------------------------------------------
                       --
   17 00000000         
   18 00000000         ; Texas Instruments LM4F120H5QR device-specific
   19 00000000         ; initialization & operational code for UART I/O,
   20 00000000         ; obtained from Jonathan Valvano of UTexas
   21 00000000         
   22 00000000                 INCLUDE          LM4F120H5QR.inc
    1 00000000         ; File: LM4F120H5QR.inc     (DO NOT MODIFY THIS FILE!!!!
                       )
    2 00000000         ; Author: Jonathan W. Valvano, Univ. of Texas
    3 00000000         
    4 00000000         ; This is an ARM assembly include file, which
    5 00000000         ; contains Texas Instruments LM4F120H5QR hardware specif
                       ic functions,
    6 00000000         ; obtained gratefully by Rajiv Bagai from Jonathan Valva
                       no, U of Texas
    7 00000000         
    8 00000000         ; Copyright 2013 by Jonathan W. Valvano, valvano@mail.ut
                       exas.edu
    9 00000000         ;   You may use, edit, run or distribute this file
   10 00000000         ;   as long as the above copyright notice remains intact
                       
   11 00000000         
   12 00000000                 AREA             LM4F120H5QR, CODE, READONLY, AL
IGN=2
   13 00000000         
   14 00000000 00000007 
                       SYSDIV2 EQU              7
   15 00000000         ; bus frequency is 400MHz/(SYSDIV2+1) = 400MHz/(7+1) = 5
                       0 MHz
   16 00000000         
   17 00000000 400FE050 
                       SYSCTL_RIS_R



ARM Macro Assembler    Page 2 


                               EQU              0x400FE050
   18 00000000 00000040 
                       SYSCTL_RIS_PLLLRIS
                               EQU              0x00000040  ; PLL Lock Raw Inte
                                                            rrupt Status
   19 00000000 400FE060 
                       SYSCTL_RCC_R
                               EQU              0x400FE060
   20 00000000 000003C0 
                       SYSCTL_RCC_XTAL_M
                               EQU              0x000003C0  ; Crystal Value
   21 00000000 000002C0 
                       SYSCTL_RCC_XTAL_6MHZ
                               EQU              0x000002C0  ; 6 MHz Crystal
   22 00000000 00000380 
                       SYSCTL_RCC_XTAL_8MHZ
                               EQU              0x00000380  ; 8 MHz Crystal
   23 00000000 00000540 
                       SYSCTL_RCC_XTAL_16MHZ
                               EQU              0x00000540  ; 16 MHz Crystal
   24 00000000 400FE070 
                       SYSCTL_RCC2_R
                               EQU              0x400FE070
   25 00000000 80000000 
                       SYSCTL_RCC2_USERCC2
                               EQU              0x80000000  ; Use RCC2
   26 00000000 40000000 
                       SYSCTL_RCC2_DIV400
                               EQU              0x40000000  ; Divide PLL as 400
                                                             MHz vs. 200
   27 00000000         ; MHz
   28 00000000 1F800000 
                       SYSCTL_RCC2_SYSDIV2_M
                               EQU              0x1F800000  ; System Clock Divi
                                                            sor 2
   29 00000000 00400000 
                       SYSCTL_RCC2_SYSDIV2LSB
                               EQU              0x00400000  ; Additional LSB fo
                                                            r SYSDIV2
   30 00000000 00002000 
                       SYSCTL_RCC2_PWRDN2
                               EQU              0x00002000  ; Power-Down PLL 2
   31 00000000 00000800 
                       SYSCTL_RCC2_BYPASS2
                               EQU              0x00000800  ; PLL Bypass 2
   32 00000000 00000070 
                       SYSCTL_RCC2_OSCSRC2_M
                               EQU              0x00000070  ; Oscillator Source
                                                             2
   33 00000000 00000000 
                       SYSCTL_RCC2_OSCSRC2_MO
                               EQU              0x00000000  ; MOSC
   34 00000000         
   35 00000000         ;------------PLL_Init------------
   36 00000000         ; Configure the system to get its clock from the PLL.
   37 00000000         ; Input: none
   38 00000000         ; Output: none
   39 00000000         ; Modifies: R0, R1, R2, R3
   40 00000000         PLL_Init



ARM Macro Assembler    Page 3 


   41 00000000         ; 0) configure the system to use RCC2 for advanced featu
                       res
   42 00000000         ;    such as 400 MHz PLL and non-integer System Clock Di
                       visor
   43 00000000 4B3A            LDR              R3, =SYSCTL_RCC2_R ; R3 = SYSCT
                                                            L_RCC2_R (pointer)
   44 00000002 681A            LDR              R2, [R3]    ; R2 = [R3] (value)
                                                            
   45 00000004 F042 4200       ORR              R2, R2, #SYSCTL_RCC2_USERCC2 ; 
                                                            R2 = R2|SYSCTL_RCC2
                                                            _USERCC2
   46 00000008 601A            STR              R2, [R3]    ; [R3] = R2
   47 0000000A         ; 1) bypass PLL while initializing
   48 0000000A F442 6200       ORR              R2, R2, #SYSCTL_RCC2_BYPASS2 ; 
                                                            R2 = R2|SYSCTL_RCC2
                                                            _BYPASS2
   49 0000000E 601A            STR              R2, [R3]    ; [R3] = R2
   50 00000010         ; 2) select the crystal value and oscillator source
   51 00000010 4937            LDR              R1, =SYSCTL_RCC_R ; R1 = SYSCTL
                                                            _RCC_R (pointer)
   52 00000012 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   53 00000014 F420 7070       BIC              R0, R0, #SYSCTL_RCC_XTAL_M ; R0
                                                             = R0&~SYSCTL_RCC_X
                                                            TAL_M (clear XTAL f
                                                            ield)
   54 00000018 F440 60A8       ORR              R0, R0, #SYSCTL_RCC_XTAL_16MHZ 
                                                            ;R0 = R0|SYSCTL_RCC
                                                            _XTAL_16MHZ (config
                                                            ure for 16 MHz crys
                                                            tal)
   55 0000001C 6008            STR              R0, [R1]    ; [R1] = R0
   56 0000001E         ; R2 = R2&~SYSCTL_RCC2_OSCSRC2_M (clear oscillator sourc
                       e field)
   57 0000001E F022 0270       BIC              R2, R2, #SYSCTL_RCC2_OSCSRC2_M
   58 00000022         ; R2 = R2|SYSCTL_RCC2_OSCSRC2_MO (configure for main osc
                       illator source)
   59 00000022 F042 0200       ORR              R2, R2, #SYSCTL_RCC2_OSCSRC2_MO
   60 00000026         ; 3) activate PLL by clearing PWRDN
   61 00000026 F422 5200       BIC              R2, R2, #SYSCTL_RCC2_PWRDN2 ; R
                                                            2 = R2&~SYSCTL_RCC2
                                                            _PWRDN2
   62 0000002A         ; 4) set the desired system divider and the system divid
                       er least significant bit
   63 0000002A F042 4280       ORR              R2, R2, #SYSCTL_RCC2_DIV400 ; R
                                                            2 = R2|SYSCTL_RCC2_
                                                            DIV400 (use 400 MHz
                                                             PLL)
   64 0000002E         ;R2 = R2&~SYSCTL_RCC2_SYSDIV2_M (clear system clock divi
                       der field)
   65 0000002E F022 52FC       BIC              R2, R2, #SYSCTL_RCC2_SYSDIV2_M
   66 00000032         ;R2 = R2&~SYSCTL_RCC2_SYSDIV2LSB (clear bit SYSDIV2LSB)
   67 00000032 F422 0280       BIC              R2, R2, #SYSCTL_RCC2_SYSDIV2LSB
   68 00000036         ; set Divisor by writing 7-bit constant to bits 28-22
   69 00000036 F102 72E0       ADD              R2, R2, #(SYSDIV2<<22) ; R2 = R
                                                            2 + (SYSDIV2<<22) (
                                                            configure SYSDIV2 a
                                                            nd SYSDIV2LSB field
                                                            s in RCC2)



ARM Macro Assembler    Page 4 


   70 0000003A 601A            STR              R2, [R3]    ; [R3] = R2
   71 0000003C         ; 5) wait for the PLL to lock by polling PLLLRIS
   72 0000003C 492D            LDR              R1, =SYSCTL_RIS_R ; R1 = SYSCTL
                                                            _RIS_R (pointer)
   73 0000003E         PLL_Init_loop
   74 0000003E 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   75 00000040 F010 0040       ANDS             R0, R0, #SYSCTL_RIS_PLLLRIS ; R
                                                            0 = R0&SYSCTL_RIS_P
                                                            LLLRIS
   76 00000044 D0FB            BEQ              PLL_Init_loop ; if(R0 == 0), ke
                                                            ep polling
   77 00000046         ; 6) enable use of PLL by clearing BYPASS
   78 00000046 F422 6200       BIC              R2, R2, #SYSCTL_RCC2_BYPASS2 ; 
                                                            R2 = R2&~SYSCTL_RCC
                                                            2_BYPASS2
   79 0000004A 601A            STR              R2, [R3]    ; [R3] = R2
   80 0000004C 4770            BX               LR          ; return
   81 0000004E         
   82 0000004E 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   83 0000004E E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   84 0000004E E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   85 0000004E 40004420 
                       GPIO_PORTA_AFSEL_R
                               EQU              0x40004420
   86 0000004E 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   87 0000004E 40004528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40004528
   88 0000004E 4000452C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4000452C
   89 0000004E 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   90 0000004E 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   91 0000004E 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   92 0000004E 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   93 0000004E 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   94 0000004E 4000C030 



ARM Macro Assembler    Page 5 


                       UART0_CTL_R
                               EQU              0x4000C030
   95 0000004E 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   96 0000004E 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   97 0000004E 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   98 0000004E 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   99 0000004E 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
  100 0000004E 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
  101 0000004E 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
  102 0000004E 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
  103 0000004E 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs
                                                            
  104 0000004E 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable
  105 0000004E 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
  106 0000004E 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
  107 0000004E 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt
  108 0000004E         ; Mask
  109 0000004E 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
  110 0000004E 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
  111 0000004E 00000040 



ARM Macro Assembler    Page 6 


                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw
  112 0000004E         ; Interrupt Status
  113 0000004E 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt
  114 0000004E         ; Status
  115 0000004E 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt
  116 0000004E         ; Status
  117 0000004E 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
  118 0000004E 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
  119 0000004E 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
  120 0000004E 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
  121 0000004E 400FE618 
                       SYSCTL_RCGCUART_R
                               EQU              0x400FE618
  122 0000004E         
  123 0000004E         ;------------UART_Init------------
  124 0000004E         ; Initialize UART0, i.e. debugger window UART #1
  125 0000004E         ; Baud rate is 115200 bits/sec
  126 0000004E         ; Input: none
  127 0000004E         ; Output: none
  128 0000004E         ; Modifies: R0, R1
  129 0000004E         ; Assumes: 50 MHz system clock
  130 0000004E         UART_Init
  131 0000004E B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  132 00000050         ; activate clock for UART0
  133 00000050 4929            LDR              R1, =SYSCTL_RCGCUART_R ; R1 = &
                                                            SYSCTL_RCGCUART_R
  134 00000052 6808            LDR              R0, [R1]    ; R0 = [R1]
  135 00000054 F040 0001       ORR              R0, R0, #0x01 ; enable UART0
  136 00000058 6008            STR              R0, [R1]    ; [R1] = R0
  137 0000005A         ; activate clock for port A
  138 0000005A 4928            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = &
                                                            SYSCTL_RCGCGPIO_R
  139 0000005C 6808            LDR              R0, [R1]    ; R0 = [R1]
  140 0000005E F040 0001       ORR              R0, R0, #0x01 ; enable Port A
  141 00000062 6008            STR              R0, [R1]    ; [R1] = R0
  142 00000064         
  143 00000064         ; disable UART
  144 00000064 4926            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R



ARM Macro Assembler    Page 7 


                                                            
  145 00000066 6808            LDR              R0, [R1]    ; R0 = [R1]
  146 00000068 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)
  147 0000006C 6008            STR              R0, [R1]    ; [R1] = R0
  148 0000006E         ; set the baud rate (equations on p845 of datasheet)
  149 0000006E 4925            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  150 00000070 F04F 001B       MOV              R0, #27     ; R0 = IBRD = int(5
                                                            0,000,000 / (16 * 1
                                                            15,200)) = int(27.1
                                                            267)
  151 00000074 6008            STR              R0, [R1]    ; [R1] = R0
  152 00000076 4924            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R
  153 00000078 F04F 0008       MOV              R0, #8      ; R0 = FBRD = int(0
                                                            .1267 * 64 + 0.5) =
                                                             8
  154 0000007C 6008            STR              R0, [R1]    ; [R1] = R0
  155 0000007E         ; configure Line Control Register settings
  156 0000007E 4923            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  157 00000080 6808            LDR              R0, [R1]    ; R0 = [R1]
  158 00000082 F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)
  159 00000086         ; 8 bit word length, no parity bits, one stop bit, FIFOs
                       
  160 00000086 F100 0070       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN)
  161 0000008A 6008            STR              R0, [R1]    ; [R1] = R0
  162 0000008C         ; enable UART
  163 0000008C 491C            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  164 0000008E 6808            LDR              R0, [R1]    ; R0 = [R1]
  165 00000090 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  166 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  167 00000096         ; enable alternate function
  168 00000096 491E            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 
                                                            &GPIO_PORTA_AFSEL_R
                                                            
  169 00000098 6808            LDR              R0, [R1]    ; R0 = [R1]
  170 0000009A F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 
                                                            PA1-0)
  171 0000009E 6008            STR              R0, [R1]    ; [R1] = R0
  172 000000A0         ; enable digital port
  173 000000A0 491C            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  174 000000A2 6808            LDR              R0, [R1]    ; R0 = [R1]
  175 000000A4 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  176 000000A8 6008            STR              R0, [R1]    ; [R1] = R0
  177 000000AA         ; configure as UART
  178 000000AA 491B            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &



ARM Macro Assembler    Page 8 


                                                            GPIO_PORTA_PCTL_R
  179 000000AC 6808            LDR              R0, [R1]    ; R0 = [R1]
  180 000000AE F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  181 000000B2 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  182 000000B6 6008            STR              R0, [R1]    ; [R1] = R0
  183 000000B8         ; disable analog functionality
  184 000000B8 4918            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  185 000000BA F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  186 000000BE 6008            STR              R0, [R1]    ; [R1] = R0
  187 000000C0 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  188 000000C2         
  189 000000C2         ;------------UART_InChar------------
  190 000000C2         ; input ASCII character from UART
  191 000000C2         ; spin if no data available i
  192 000000C2         ; Input: none
  193 000000C2         ; Output: R0  character in from UART
  194 000000C2         UART_InChar
  195 000000C2 B402            PUSH             {R1}
  196 000000C4 4916            LDR              R1,=UART0_FR_R
  197 000000C6 6808    InLoop  LDR              R0,[R1]     ; read FR
  198 000000C8 F010 0010       ANDS             R0,#0x0010
  199 000000CC D1FB            BNE              InLoop      ; wait until RXFE i
                                                            s 0
  200 000000CE 4915            LDR              R1,=UART0_DR_R
  201 000000D0 6808            LDR              R0,[R1]     ; read DR
  202 000000D2 BC02            POP              {R1}
  203 000000D4 4770            BX               LR
  204 000000D6         
  205 000000D6         ;------------UART_OutChar------------
  206 000000D6         ; output ASCII character to UART
  207 000000D6         ; spin if UART transmit FIFO is full
  208 000000D6         ; Input: R0  character out to UART
  209 000000D6         ; Output: none
  210 000000D6         ; Modifies: R0, R1
  211 000000D6         UART_OutChar
  212 000000D6 B406            PUSH             {R1, R2}
  213 000000D8 4911            LDR              R1,=UART0_FR_R
  214 000000DA 680A    OLoop   LDR              R2,[R1]     ; read FR
  215 000000DC F012 0220       ANDS             R2,#0x0020
  216 000000E0 D1FB            BNE              OLoop       ; wait until TXFF i
                                                            s 0
  217 000000E2 4910            LDR              R1,=UART0_DR_R
  218 000000E4 6008            STR              R0,[R1]     ; write DR
  219 000000E6 BC06            POP              {R1, R2}
  220 000000E8 4770            BX               LR
  221 000000EA         
  222 000000EA 00 00           ALIGN
  223 000000EC         



ARM Macro Assembler    Page 9 


  224 000000EC                 END
   23 000000EC         
   24 000000EC         ;-------------------------------------------------------
                       --
   25 000000EC         
   26 000000EC         ; Some utility functions for CS 238, developed by Rajiv 
                       Bagai
   27 000000EC         
   28 000000EC 400FE070 
              400FE060 
              400FE050 
              400FE618 
              400FE608 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              40004420 
              4000451C 
              4000452C 
              40004528 
              4000C018 
              4000C000         AREA             CS238Utilities, CODE
   29 00000000         
   30 00000000                 EXPORT           GetCh
   31 00000000                 EXPORT           PutCh
   32 00000000                 EXPORT           PutCRLF
   33 00000000                 EXPORT           UDivMod
   34 00000000                 EXPORT           GetDec
   35 00000000                 EXPORT           PutDec
   36 00000000                 EXPORT           GetStr
   37 00000000                 EXPORT           PutStr
   38 00000000         
   39 00000000                 ALIGN
   40 00000000         
   41 00000000         ;---------------------GetCh---------------------
   42 00000000         ; Input and echo one keyboard character from the UART #1
                        window
   43 00000000         ; For CR, output an extra LF
   44 00000000         ; Output: R0 = keyboard character
   45 00000000         
   46 00000000         GetCh
   47 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR for returni
                                                            ng
   48 00000002 F7FF FFFE       BL               UART_InChar ; input a character
                                                             into R0
   49 00000006 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er on the UART wind
                                                            ow
   50 0000000A         ; if input character != CR
   51 0000000A 280D            CMP              R0, #CR
   52 0000000C         ; then
   53 0000000C BF18 BD00       POPNE            {PC}        ; return immediatel
                                                            y to caller
   54 00000010         ; endif
   55 00000010 F04F 000A       MOV              R0, #LF
   56 00000014 F7FF FFFE       BL               UART_OutChar ; output an extra 
                                                            LF for CR



ARM Macro Assembler    Page 10 


   57 00000018 F04F 000D       MOV              R0, #CR     ; restore R0 with C
                                                            R
   58 0000001C BD00            POP              {PC}        ; return to caller
   59 0000001E         
   60 0000001E         ;---------------------PutCh---------------------
   61 0000001E         ; Output character in R0 to the UART #1 window
   62 0000001E         
   63 0000001E         PutCh
   64 0000001E B500            PUSH             {LR}        ; save current valu
                                                            e of LR for returni
                                                            ng
   65 00000020 F7FF FFFE       BL               UART_OutChar ; display the char
                                                            acter on the UART w
                                                            indow
   66 00000024 BD00            POP              {PC}        ; return to caller
   67 00000026         
   68 00000026         ;---------------------PutCRLF---------------------
   69 00000026         ; Output CR and LF to the UART #1 window, to bring curso
                       r to beginning of next line
   70 00000026         
   71 00000026         PutCRLF
   72 00000026 B501            PUSH             {R0, LR}    ; save scratch regi
                                                            ster(s) and return 
                                                            address
   73 00000028 F04F 000D       MOV              R0, #CR
   74 0000002C F7FF FFFE       BL               UART_OutChar ; bring cursor bac
                                                            k on the UART windo
                                                            w
   75 00000030 F04F 000A       MOV              R0, #LF
   76 00000034 F7FF FFFE       BL               UART_OutChar ; move cursor to n
                                                            ext line
   77 00000038 BD01            POP              {R0, PC}    ; restore scratch r
                                                            egister(s) and retu
                                                            rn to caller
   78 0000003A         
   79 0000003A         ;---------------------UDivMod---------------------
   80 0000003A         ; Perform unsigned division to return quotient and remai
                       nder
   81 0000003A         ; Input: R0 = numerator, R1 = denominator
   82 0000003A         ; Output: R0 = remainder, R1 = quotient
   83 0000003A         ; This function can be useful because ARM lacks a divisi
                       on instruction
   84 0000003A         
   85 0000003A         UDivMod
   86 0000003A B50C            PUSH             {R2, R3, LR} ; save scratch reg
                                                            ister(s) and return
                                                             address
   87 0000003C 460A            MOV              R2, R1      ; initialize R2 = d
                                                            enominator
   88 0000003E         
   89 0000003E EBB2 0F50       CMP              R2, R0, LSR #1 ; double R2 unti
                                                            l R2 > numerator / 
                                                            2,
   90 00000042 BF98 0052 
                       UDML1   MOVLS            R2, R2, LSL #1 ; i.e. 2 * R2 > 
                                                            numerator
   91 00000046 EBB2 0F50       CMP              R2, R0, LSR #1
   92 0000004A D9FA            BLS              UDML1
   93 0000004C         



ARM Macro Assembler    Page 11 


   94 0000004C F04F 0300       MOV              R3, #0      ; initialize quotie
                                                            nt
   95 00000050         UDML2
   96 00000050         ; do
   97 00000050         ; if numerator >= R2
   98 00000050 4290            CMP              R0, R2
   99 00000052         ; then
  100 00000052 BF28 1A80       SUBHS            R0, R0, R2  ; subtract R2 from 
                                                            numerator,
  101 00000056 EB43 0303       ADC              R3, R3, R3  ; and double quotie
                                                            nt
  102 0000005A         ; endif
  103 0000005A EA4F 0252       MOV              R2, R2, LSR #1 ; halve R2
  104 0000005E 428A            CMP              R2, R1
  105 00000060 D2F6            BHS              UDML2
  106 00000062         ; while R2 >= denominator
  107 00000062         
  108 00000062 4619            MOV              R1, R3      ; R1 = quotient (R0
                                                             is already remaind
                                                            er)
  109 00000064 BD0C            POP              {R2, R3, PC} ; restore scratch 
                                                            register(s) and ret
                                                            urn to caller
  110 00000066         
  111 00000066         ;---------------------GetDec---------------------
  112 00000066         ; Input a signed number from the UART #1 window
  113 00000066         ; Eat up all leading characters that are not digits, '+'
                       , or '-'
  114 00000066         ; Also eat up a trailing non-digit character
  115 00000066         ; Output: R0 = the input number
  116 00000066         
  117 00000066         GetDec
  118 00000066 B50E            PUSH             {R1-R3, LR} ; save scratch regi
                                                            ster(s) and return 
                                                            address
  119 00000068         
  120 00000068 F04F 0101 
                       GDL1    MOV              R1, #1      ; default sign mult
                                                            iplier for non-nega
                                                            tive values
  121 0000006C E001            B                GDL3
  122 0000006E         
  123 0000006E F04F 31FF 
                       GDL2    MOV              R1, #-1     ; sign multiplier f
                                                            or -ive values
  124 00000072         
  125 00000072         GDL3
  126 00000072         ; Eat up all leading characters that are not digits, '+'
                       , or '-'
  127 00000072 F7FF FFFE       BL               GetCh       ; input next charac
                                                            ter into R0
  128 00000076         
  129 00000076 282B            CMP              R0, #'+'
  130 00000078 D0F6            BEQ              GDL1        ; treat '+' as no o
                                                            peration
  131 0000007A         
  132 0000007A 282D            CMP              R0, #'-'
  133 0000007C D0F7            BEQ              GDL2        ; remember -ive sig
                                                            n



ARM Macro Assembler    Page 12 


  134 0000007E         
  135 0000007E 2830            CMP              R0, #'0'    ; now ignore all no
                                                            n-digits
  136 00000080 D3F2            BLO              GDL1
  137 00000082 2839            CMP              R0, #'9'
  138 00000084 D8F0            BHI              GDL1        ; digit found, get 
                                                            to business
  139 00000086         
  140 00000086         ; Now R0 has first digit and R3 has multiplier
  141 00000086 F04F 0200       MOV              R2, #0      ; initialize answer
                                                            
  142 0000008A F04F 030A       MOV              R3, #10
  143 0000008E         
  144 0000008E         GDL4
  145 0000008E         ; do
  146 0000008E F1A0 0030       SUB              R0, #'0'    ; convert ASCII dig
                                                            it to actual value
  147 00000092 FB03 0202       MLA              R2, R3, R2, R0 
                                                            ; R2 = 10 * R2 + R0
                                                            
  148 00000096         
  149 00000096 F7FF FFFE       BL               GetCh       ; input next charac
                                                            ter into R0
  150 0000009A 2830            CMP              R0, #'0'
  151 0000009C D301            BLO              GDL5
  152 0000009E 2839            CMP              R0, #'9'
  153 000000A0 D9F5            BLS              GDL4
  154 000000A2         ; while next character is still a digit
  155 000000A2         
  156 000000A2         GDL5
  157 000000A2         ; all digits processed, and next character eaten up
  158 000000A2         
  159 000000A2 FB01 F002       MUL              R0, R1, R2  ; incorporate sign 
                                                            multiplier
  160 000000A6         
  161 000000A6 BD0E            POP              {R1-R3, PC} ; restore scratch r
                                                            egister(s) and retu
                                                            rn to caller
  162 000000A8         
  163 000000A8         ;---------------------PutDec---------------------
  164 000000A8         ; Output the signed number in R0 to the UART #1 window
  165 000000A8         
  166 000000A8         PutDec
  167 000000A8 B507            PUSH             {R0-R2, LR} ; save scratch regi
                                                            ster(s) and return 
                                                            address
  168 000000AA         
  169 000000AA         ; if R0 is negative
  170 000000AA 2800            CMP              R0, #0
  171 000000AC DA07            BGE              PutNNeg
  172 000000AE         ; then
  173 000000AE B401            PUSH             {R0}
  174 000000B0 F04F 002D       MOV              R0, #'-'
  175 000000B4 F7FF FFFE       BL               UART_OutChar ; display the nega
                                                            tive sign '-'
  176 000000B8 BC01            POP              {R0}
  177 000000BA F1C0 0000       RSB              R0, R0, #0  ; negate R0
  178 000000BE         ; endif
  179 000000BE         



ARM Macro Assembler    Page 13 


  180 000000BE         PutNNeg
  181 000000BE F04F 0200       MOV              R2, #0      ; initialize R2 = #
                                                             of pushed digits
  182 000000C2         PDL1
  183 000000C2         ; do
  184 000000C2 F04F 010A       MOV              R1, #10     ; divisor
  185 000000C6 F7FF FFFE       BL               UDivMod     ; R0 = R0 % 10, and
                                                             R1 = R0 / 10
  186 000000CA B401            PUSH             {R0}        ; push least signif
                                                            icant digit onwards
                                                            
  187 000000CC F102 0201       ADD              R2, R2, #1  ; increment pushed 
                                                            digit count
  188 000000D0 0008            MOVS             R0, R1      ; R0 = quotient of 
                                                            division
  189 000000D2 D1F6            BNE              PDL1
  190 000000D4         ; while R0 != 0
  191 000000D4         
  192 000000D4         PDL2
  193 000000D4         ; do
  194 000000D4 BC01            POP              {R0}        ; pop most signific
                                                            ant digit onwards
  195 000000D6 F100 0030       ADD              R0, R0, #'0' ; obtain ASCII cod
                                                            e of digit
  196 000000DA F7FF FFFE       BL               UART_OutChar ; display digit
  197 000000DE 1E52            SUBS             R2, R2, #1  ; decrement digit c
                                                            ount on stack
  198 000000E0 D1F8            BNE              PDL2
  199 000000E2         ; while R2 != 0
  200 000000E2         
  201 000000E2 BD07            POP              {R0-R2, PC} ; restore scratch r
                                                            egister(s) and retu
                                                            rn to caller
  202 000000E4         
  203 000000E4         ;---------------------GetStr---------------------
  204 000000E4         ; Read and store a CR-terminated string from the UART #1
                        window
  205 000000E4         ; and place a NULL character at the end
  206 000000E4         ; Inputs: R0 = memory buffer address, R1 = max number of
                        bytes to read (unsigned)
  207 000000E4         ; Buffer must have at least R1 + 1 bytes, due to the ext
                       ra null
  208 000000E4         
  209 000000E4         GetStr
  210 000000E4 B507            PUSH             {R0-R2, LR} ; save scratch regi
                                                            ster(s) and return 
                                                            address
  211 000000E6         
  212 000000E6 4602            MOV              R2, R0      ; R2 = buffer point
                                                            er
  213 000000E8         GSL1
  214 000000E8         ; while R1 != 0 and next input character is non-CR
  215 000000E8 2900            CMP              R1, #0
  216 000000EA D00A            BEQ              GSL2
  217 000000EC F7FF FFFE       BL               UART_InChar ; input a character
                                                             into R0
  218 000000F0 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er on the UART wind
                                                            ow



ARM Macro Assembler    Page 14 


  219 000000F4 280D            CMP              R0, #CR
  220 000000F6 D004            BEQ              GSL2
  221 000000F8         ; do
  222 000000F8 F802 0B01       STRB             R0, [R2], #1 ; store character 
                                                            in buffer & advance
                                                             R2
  223 000000FC F1A1 0101       SUB              R1, #1      ; decrement max cha
                                                            racter count
  224 00000100 E7F2            B                GSL1
  225 00000102         ; end while
  226 00000102         
  227 00000102         GSL2
  228 00000102 F7FF FFFE       BL               PutCRLF
  229 00000106 F04F 0000       MOV              R0, #0
  230 0000010A 7010            STRB             R0, [R2]    ; terminate string 
                                                            in buffer with NULL
                                                             character
  231 0000010C         
  232 0000010C BD07            POP              {R0-R2, PC} ; restore scratch r
                                                            egister(s) and retu
                                                            rn to caller
  233 0000010E         
  234 0000010E         ;---------------------PutStr---------------------
  235 0000010E         ; Output null-terminated string pointed to by R0 to the 
                       UART #1 window
  236 0000010E         
  237 0000010E         PutStr
  238 0000010E B503            PUSH             {R0, R1, LR} ; save scratch reg
                                                            ister(s) and return
                                                             address
  239 00000110         
  240 00000110 4601            MOV              R1, R0      ; R1 = string point
                                                            er
  241 00000112         PSL1
  242 00000112         ; while string character is non-null
  243 00000112 F811 0B01       LDRB             R0, [R1], #1
  244 00000116 2800            CMP              R0, #0
  245 00000118 D002            BEQ              PSL2
  246 0000011A         ; do
  247 0000011A F7FF FFFE       BL               UART_OutChar 
                                                            ; display character
                                                            
  248 0000011E E7F8            B                PSL1
  249 00000120         ; end while
  250 00000120         
  251 00000120         PSL2
  252 00000120 BD03            POP              {R0, R1, PC} ; restore scratch 
                                                            register(s) and ret
                                                            urn to caller
  253 00000122         
  254 00000122         ; End of utility functions
  255 00000122         
  256 00000122 00 00           ALIGN
  257 00000124         
  258 00000124         ;-------------------------------------------------------
                       --------------------------
  259 00000124         
  260 00000124         ; Allocate space for the system stack
  261 00000124         



ARM Macro Assembler    Page 15 


  262 00000124                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
  263 00000000         
  264 00000000 00000400 
                       Stack   EQU              0x00000400  ; Stack Size (in By
                                                            tes)
  265 00000000         
  266 00000000         StackMem
  267 00000000                 SPACE            Stack
  268 00000400         
  269 00000400         ; Place code into the reset code section
  270 00000400         
  271 00000400                 AREA             RESET, CODE, READONLY
  272 00000000         
  273 00000000         ; The vector table.
  274 00000000         
  275 00000000                 EXPORT           __Vectors
  276 00000000         __Vectors
  277 00000000 00000400        DCD              StackMem + Stack ; Top of Stack
                                                            
  278 00000004 00000000        DCD              Reset_Handler ; Reset Handler
  279 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00         SPACE            4 * 9, 0    ; more vector field
                                                            s
  280 0000002C 00000000        DCD              SVC_Handler ; SVCall Handler
  281 00000030 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 16 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 17 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 18 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            4 * 143, 0  ; rest of vector (o
                                                            ptional)
  282 0000026C         
  283 0000026C         SVC_Handler                          ; can be expanded l
                                                            ater for ARM SWI in
                                                            structions
  284 0000026C E7FE            B                .           ; loop forever (for
                                                             now)
  285 0000026E         
  286 0000026E 00 00           ALIGN
  287 00000270         



ARM Macro Assembler    Page 19 


  288 00000270 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Zeroes  SPACE            4 * 12, 0   ; 4 zero-bytes each
                                                            , for resetting R1 
                                                            - R12
  289 000002A0         
  290 000002A0         ;*******************************************************
                       ***********************
  291 000002A0         ;
  292 000002A0         ; This is the entry point of the program when it first s
                       tarts execution,
  293 000002A0         ; or following a reset
  294 000002A0         ;
  295 000002A0         ;*******************************************************
                       ***********************
  296 000002A0         
  297 000002A0                 ENTRY
  298 000002A0                 EXPORT           Reset_Handler
  299 000002A0         
  300 000002A0         Reset_Handler
  301 000002A0         
  302 000002A0 F7FF FFFE       BL               PLL_Init    ; set system clock 
                                                            to 50 MHz
  303 000002A4 F7FF FFFE       BL               UART_Init   ; initialize UART
  304 000002A8         
  305 000002A8 F04F 000D       MOV              R0, #CR     ; R0 = CR (<carriag
                                                            e return>)
  306 000002AC F7FF FFFE       BL               UART_OutChar ; send <carriage r
                                                            eturn> to UART
  307 000002B0         
  308 000002B0 F2AF 0044       ADR              R0, Zeroes  ; reset R0 - R12 to
                                                             zeroes
  309 000002B4 E890 1FFE       LDMIA            R0, {R1-R12} ; before starting 
                                                            your program
  310 000002B8 4608            MOV              R0, R1
  311 000002BA         
  312 000002BA                 IMPORT           main        ; this label is dec
                                                            lared in file HAx-m
                                                            ain.s
  313 000002BA F7FF FFFE       BL               main        ; call to your ARM 
                                                            assembly program in
                                                             file HAx-main.s
  314 000002BE         
  315 000002BE E7FE            B                .           ; loop forever, upo
                                                            n return
  316 000002C0         



ARM Macro Assembler    Page 20 


  317 000002C0                 ALIGN
  318 000002C0         
  319 000002C0                 END                          ; end of source pro
                                                            gram in this file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\init.d -o.\objects\init.o -IC:\Users\jvu05\Desktop\Assem
bly\CS238(1)\CS238\RTE -IC:\Keil_v5\ARM\PACK\Keil\LM4F_DFP\1.0.0\Device\Include
 -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 521" --predefine="LM4F120 SETA 1" --list=.\listings\init.lst i
nit.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InLoop 000000C6

Symbol: InLoop
   Definitions
      At line 197 in file LM4F120H5QR.inc
   Uses
      At line 199 in file LM4F120H5QR.inc
Comment: InLoop used once
LM4F120H5QR 00000000

Symbol: LM4F120H5QR
   Definitions
      At line 12 in file LM4F120H5QR.inc
   Uses
      None
Comment: LM4F120H5QR unused
OLoop 000000DA

Symbol: OLoop
   Definitions
      At line 214 in file LM4F120H5QR.inc
   Uses
      At line 216 in file LM4F120H5QR.inc
Comment: OLoop used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file LM4F120H5QR.inc
   Uses
      At line 302 in file init.s
Comment: PLL_Init used once
PLL_Init_loop 0000003E

Symbol: PLL_Init_loop
   Definitions
      At line 73 in file LM4F120H5QR.inc
   Uses
      At line 76 in file LM4F120H5QR.inc
Comment: PLL_Init_loop used once
UART_InChar 000000C2

Symbol: UART_InChar
   Definitions
      At line 194 in file LM4F120H5QR.inc
   Uses
      At line 48 in file init.s
      At line 217 in file init.s

UART_Init 0000004E

Symbol: UART_Init
   Definitions
      At line 130 in file LM4F120H5QR.inc
   Uses
      At line 303 in file init.s
Comment: UART_Init used once
UART_OutChar 000000D6




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: UART_OutChar
   Definitions
      At line 211 in file LM4F120H5QR.inc
   Uses
      At line 49 in file init.s
      At line 56 in file init.s
      At line 65 in file init.s
      At line 74 in file init.s
      At line 76 in file init.s
      At line 175 in file init.s
      At line 196 in file init.s
      At line 218 in file init.s
      At line 247 in file init.s
      At line 306 in file init.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CS238Utilities 00000000

Symbol: CS238Utilities
   Definitions
      At line 28 in file init.s
   Uses
      None
Comment: CS238Utilities unused
GDL1 00000068

Symbol: GDL1
   Definitions
      At line 120 in file init.s
   Uses
      At line 130 in file init.s
      At line 136 in file init.s
      At line 138 in file init.s

GDL2 0000006E

Symbol: GDL2
   Definitions
      At line 123 in file init.s
   Uses
      At line 133 in file init.s
Comment: GDL2 used once
GDL3 00000072

Symbol: GDL3
   Definitions
      At line 125 in file init.s
   Uses
      At line 121 in file init.s
Comment: GDL3 used once
GDL4 0000008E

Symbol: GDL4
   Definitions
      At line 144 in file init.s
   Uses
      At line 153 in file init.s
Comment: GDL4 used once
GDL5 000000A2

Symbol: GDL5
   Definitions
      At line 156 in file init.s
   Uses
      At line 151 in file init.s
Comment: GDL5 used once
GSL1 000000E8

Symbol: GSL1
   Definitions
      At line 213 in file init.s
   Uses
      At line 224 in file init.s
Comment: GSL1 used once
GSL2 00000102



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: GSL2
   Definitions
      At line 227 in file init.s
   Uses
      At line 216 in file init.s
      At line 220 in file init.s

GetCh 00000000

Symbol: GetCh
   Definitions
      At line 46 in file init.s
   Uses
      At line 30 in file init.s
      At line 127 in file init.s
      At line 149 in file init.s

GetDec 00000066

Symbol: GetDec
   Definitions
      At line 117 in file init.s
   Uses
      At line 34 in file init.s
Comment: GetDec used once
GetStr 000000E4

Symbol: GetStr
   Definitions
      At line 209 in file init.s
   Uses
      At line 36 in file init.s
Comment: GetStr used once
PDL1 000000C2

Symbol: PDL1
   Definitions
      At line 182 in file init.s
   Uses
      At line 189 in file init.s
Comment: PDL1 used once
PDL2 000000D4

Symbol: PDL2
   Definitions
      At line 192 in file init.s
   Uses
      At line 198 in file init.s
Comment: PDL2 used once
PSL1 00000112

Symbol: PSL1
   Definitions
      At line 241 in file init.s
   Uses
      At line 248 in file init.s
Comment: PSL1 used once
PSL2 00000120



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: PSL2
   Definitions
      At line 251 in file init.s
   Uses
      At line 245 in file init.s
Comment: PSL2 used once
PutCRLF 00000026

Symbol: PutCRLF
   Definitions
      At line 71 in file init.s
   Uses
      At line 32 in file init.s
      At line 228 in file init.s

PutCh 0000001E

Symbol: PutCh
   Definitions
      At line 63 in file init.s
   Uses
      At line 31 in file init.s
Comment: PutCh used once
PutDec 000000A8

Symbol: PutDec
   Definitions
      At line 166 in file init.s
   Uses
      At line 35 in file init.s
Comment: PutDec used once
PutNNeg 000000BE

Symbol: PutNNeg
   Definitions
      At line 180 in file init.s
   Uses
      At line 171 in file init.s
Comment: PutNNeg used once
PutStr 0000010E

Symbol: PutStr
   Definitions
      At line 237 in file init.s
   Uses
      At line 37 in file init.s
Comment: PutStr used once
UDML1 00000042

Symbol: UDML1
   Definitions
      At line 90 in file init.s
   Uses
      At line 92 in file init.s
Comment: UDML1 used once
UDML2 00000050

Symbol: UDML2



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 95 in file init.s
   Uses
      At line 105 in file init.s
Comment: UDML2 used once
UDivMod 0000003A

Symbol: UDivMod
   Definitions
      At line 85 in file init.s
   Uses
      At line 33 in file init.s
      At line 185 in file init.s

23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 262 in file init.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 266 in file init.s
   Uses
      At line 277 in file init.s
Comment: StackMem used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 271 in file init.s
   Uses
      None
Comment: RESET unused
Reset_Handler 000002A0

Symbol: Reset_Handler
   Definitions
      At line 300 in file init.s
   Uses
      At line 278 in file init.s
      At line 298 in file init.s

SVC_Handler 0000026C

Symbol: SVC_Handler
   Definitions
      At line 283 in file init.s
   Uses
      At line 280 in file init.s
Comment: SVC_Handler used once
Zeroes 00000270

Symbol: Zeroes
   Definitions
      At line 288 in file init.s
   Uses
      At line 308 in file init.s
Comment: Zeroes used once
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 276 in file init.s
   Uses
      At line 275 in file init.s
Comment: __Vectors used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CR 0000000D

Symbol: CR
   Definitions
      At line 13 in file init.s
   Uses
      At line 51 in file init.s
      At line 57 in file init.s
      At line 73 in file init.s
      At line 219 in file init.s
      At line 305 in file init.s

GPIO_PORTA_AFSEL_R 40004420

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 85 in file LM4F120H5QR.inc
   Uses
      At line 168 in file LM4F120H5QR.inc
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40004528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 87 in file LM4F120H5QR.inc
   Uses
      At line 184 in file LM4F120H5QR.inc
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 86 in file LM4F120H5QR.inc
   Uses
      At line 173 in file LM4F120H5QR.inc
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4000452C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 88 in file LM4F120H5QR.inc
   Uses
      At line 178 in file LM4F120H5QR.inc
Comment: GPIO_PORTA_PCTL_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 14 in file init.s
   Uses
      At line 55 in file init.s
      At line 75 in file init.s

NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 82 in file LM4F120H5QR.inc
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: NVIC_EN0_INT5 unused
NVIC_EN0_R E000E100

Symbol: NVIC_EN0_R
   Definitions
      At line 83 in file LM4F120H5QR.inc
   Uses
      None
Comment: NVIC_EN0_R unused
NVIC_PRI1_R E000E404

Symbol: NVIC_PRI1_R
   Definitions
      At line 84 in file LM4F120H5QR.inc
   Uses
      None
Comment: NVIC_PRI1_R unused
SYSCTL_RCC2_BYPASS2 00000800

Symbol: SYSCTL_RCC2_BYPASS2
   Definitions
      At line 31 in file LM4F120H5QR.inc
   Uses
      At line 48 in file LM4F120H5QR.inc
      At line 78 in file LM4F120H5QR.inc

SYSCTL_RCC2_DIV400 40000000

Symbol: SYSCTL_RCC2_DIV400
   Definitions
      At line 26 in file LM4F120H5QR.inc
   Uses
      At line 63 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_DIV400 used once
SYSCTL_RCC2_OSCSRC2_M 00000070

Symbol: SYSCTL_RCC2_OSCSRC2_M
   Definitions
      At line 32 in file LM4F120H5QR.inc
   Uses
      At line 57 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_OSCSRC2_M used once
SYSCTL_RCC2_OSCSRC2_MO 00000000

Symbol: SYSCTL_RCC2_OSCSRC2_MO
   Definitions
      At line 33 in file LM4F120H5QR.inc
   Uses
      At line 59 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_OSCSRC2_MO used once
SYSCTL_RCC2_PWRDN2 00002000

Symbol: SYSCTL_RCC2_PWRDN2
   Definitions
      At line 30 in file LM4F120H5QR.inc
   Uses
      At line 61 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_PWRDN2 used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

SYSCTL_RCC2_R 400FE070

Symbol: SYSCTL_RCC2_R
   Definitions
      At line 24 in file LM4F120H5QR.inc
   Uses
      At line 43 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_R used once
SYSCTL_RCC2_SYSDIV2LSB 00400000

Symbol: SYSCTL_RCC2_SYSDIV2LSB
   Definitions
      At line 29 in file LM4F120H5QR.inc
   Uses
      At line 67 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_SYSDIV2LSB used once
SYSCTL_RCC2_SYSDIV2_M 1F800000

Symbol: SYSCTL_RCC2_SYSDIV2_M
   Definitions
      At line 28 in file LM4F120H5QR.inc
   Uses
      At line 65 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_SYSDIV2_M used once
SYSCTL_RCC2_USERCC2 80000000

Symbol: SYSCTL_RCC2_USERCC2
   Definitions
      At line 25 in file LM4F120H5QR.inc
   Uses
      At line 45 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC2_USERCC2 used once
SYSCTL_RCC_R 400FE060

Symbol: SYSCTL_RCC_R
   Definitions
      At line 19 in file LM4F120H5QR.inc
   Uses
      At line 51 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC_R used once
SYSCTL_RCC_XTAL_16MHZ 00000540

Symbol: SYSCTL_RCC_XTAL_16MHZ
   Definitions
      At line 23 in file LM4F120H5QR.inc
   Uses
      At line 54 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC_XTAL_16MHZ used once
SYSCTL_RCC_XTAL_6MHZ 000002C0

Symbol: SYSCTL_RCC_XTAL_6MHZ
   Definitions
      At line 21 in file LM4F120H5QR.inc
   Uses
      None
Comment: SYSCTL_RCC_XTAL_6MHZ unused
SYSCTL_RCC_XTAL_8MHZ 00000380

Symbol: SYSCTL_RCC_XTAL_8MHZ



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 22 in file LM4F120H5QR.inc
   Uses
      None
Comment: SYSCTL_RCC_XTAL_8MHZ unused
SYSCTL_RCC_XTAL_M 000003C0

Symbol: SYSCTL_RCC_XTAL_M
   Definitions
      At line 20 in file LM4F120H5QR.inc
   Uses
      At line 53 in file LM4F120H5QR.inc
Comment: SYSCTL_RCC_XTAL_M used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 120 in file LM4F120H5QR.inc
   Uses
      At line 138 in file LM4F120H5QR.inc
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCUART_R 400FE618

Symbol: SYSCTL_RCGCUART_R
   Definitions
      At line 121 in file LM4F120H5QR.inc
   Uses
      At line 133 in file LM4F120H5QR.inc
Comment: SYSCTL_RCGCUART_R used once
SYSCTL_RIS_PLLLRIS 00000040

Symbol: SYSCTL_RIS_PLLLRIS
   Definitions
      At line 18 in file LM4F120H5QR.inc
   Uses
      At line 75 in file LM4F120H5QR.inc
Comment: SYSCTL_RIS_PLLLRIS used once
SYSCTL_RIS_R 400FE050

Symbol: SYSCTL_RIS_R
   Definitions
      At line 17 in file LM4F120H5QR.inc
   Uses
      At line 72 in file LM4F120H5QR.inc
Comment: SYSCTL_RIS_R used once
SYSDIV2 00000007

Symbol: SYSDIV2
   Definitions
      At line 14 in file LM4F120H5QR.inc
   Uses
      At line 69 in file LM4F120H5QR.inc
Comment: SYSDIV2 used once
Stack 00000400

Symbol: Stack
   Definitions
      At line 264 in file init.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 267 in file init.s
      At line 277 in file init.s

UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 94 in file LM4F120H5QR.inc
   Uses
      At line 144 in file LM4F120H5QR.inc
      At line 163 in file LM4F120H5QR.inc

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 89 in file LM4F120H5QR.inc
   Uses
      At line 200 in file LM4F120H5QR.inc
      At line 217 in file LM4F120H5QR.inc

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 92 in file LM4F120H5QR.inc
   Uses
      At line 152 in file LM4F120H5QR.inc
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 90 in file LM4F120H5QR.inc
   Uses
      At line 196 in file LM4F120H5QR.inc
      At line 213 in file LM4F120H5QR.inc

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 91 in file LM4F120H5QR.inc
   Uses
      At line 149 in file LM4F120H5QR.inc
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 98 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART0_ICR_R unused
UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions
      At line 95 in file LM4F120H5QR.inc



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: UART0_IFLS_R unused
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 96 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART0_IM_R unused
UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 93 in file LM4F120H5QR.inc
   Uses
      At line 156 in file LM4F120H5QR.inc
Comment: UART0_LCRH_R used once
UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 97 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART0_RIS_R unused
UART_CTL_UARTEN 00000001

Symbol: UART_CTL_UARTEN
   Definitions
      At line 104 in file LM4F120H5QR.inc
   Uses
      At line 146 in file LM4F120H5QR.inc
      At line 165 in file LM4F120H5QR.inc

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 101 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_FR_RXFE unused
UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 99 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 100 in file LM4F120H5QR.inc
   Uses
      None



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

Comment: UART_FR_TXFF unused
UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 117 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_ICR_RTIC unused
UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 119 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_ICR_RXIC unused
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 118 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_ICR_TXIC unused
UART_IFLS_RX1_8 00000000

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 105 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_IFLS_RX1_8 unused
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 106 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_IFLS_TX1_8 unused
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 107 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_IM_RTIM unused
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 110 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_IM_RXIM unused
UART_IM_TXIM 00000020




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

Symbol: UART_IM_TXIM
   Definitions
      At line 109 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_IM_TXIM unused
UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 103 in file LM4F120H5QR.inc
   Uses
      At line 160 in file LM4F120H5QR.inc
Comment: UART_LCRH_FEN used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 102 in file LM4F120H5QR.inc
   Uses
      At line 160 in file LM4F120H5QR.inc
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_RTRIS 00000040

Symbol: UART_RIS_RTRIS
   Definitions
      At line 111 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_RIS_RTRIS unused
UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 115 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_RIS_RXRIS unused
UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 113 in file LM4F120H5QR.inc
   Uses
      None
Comment: UART_RIS_TXRIS unused
56 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 312 in file init.s
   Uses
      At line 313 in file init.s
Comment: main used once
1 symbol
430 symbols in table
